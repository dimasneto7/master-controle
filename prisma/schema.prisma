datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

model Customer {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  phone String
  email String  
  address String?

  userId String? @db.ObjectId
  User User? @relation(fields: [userId], references: [id])

  tickets Ticket[]
  
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
}

model Ticket {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  status String

  customerId String? @db.ObjectId
  customer Customer? @relation(fields: [customerId], references: [id])

  userId String? @db.ObjectId
  User User? @relation(fields: [userId], references: [id])

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  tickets Ticket[]
  customers Customer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}